@page "/calendar"
@using ParkingManagement.Models
@using ParkingManagement.Services
@inject IDataService DataService
@inject IJSRuntime JSRuntime

<PageTitle>주차 관리 - 캘린더</PageTitle>

<div class="container-fluid p-0">
    <div class="row g-0">
        <!-- Calendar Section -->
        <div class="col-12">
            <div class="calendar-container">
                <div class="calendar-header">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h2 class="mb-0">@currentMonth.ToString("yyyy년 MM월")</h2>
                        <div class="btn-group" role="group">
                            <button class="btn btn-outline-primary" @onclick="PreviousMonth">
                                <i class="fas fa-chevron-left"></i>
                            </button>
                            <button class="btn btn-outline-primary" @onclick="NextMonth">
                                <i class="fas fa-chevron-right"></i>
                            </button>
                        </div>
                    </div>
                </div>

                <div class="calendar-grid">
                    <!-- Day headers -->
                    <div class="calendar-row header">
                        <div class="calendar-cell">일</div>
                        <div class="calendar-cell">월</div>
                        <div class="calendar-cell">화</div>
                        <div class="calendar-cell">수</div>
                        <div class="calendar-cell">목</div>
                        <div class="calendar-cell">금</div>
                        <div class="calendar-cell">토</div>
                    </div>

                    @foreach (var week in calendarWeeks)
                    {
                        <div class="calendar-row">
                            @foreach (var day in week.Days)
                            {
                                <div class="calendar-cell @(day.IsCurrentMonth ? "" : "other-month") @(day.Date.Date == DateTime.Today ? "today" : "")" 
                                     @onclick="() => SelectDate(day.Date)">
                                    <div class="date-number">@day.Date.Day</div>
                                    <div class="parking-info">
                                        @if (day.ParkingUsages.Any())
                                        {
                                            <div class="usage-count">사용: @day.ParkingUsages.Count</div>
                                        }
                                        @if (day.ParkingReturns.Any())
                                        {
                                            <div class="return-count">반납: @day.ParkingReturns.Count</div>
                                        }
                                        @if (day.ExternalParkings.Any())
                                        {
                                            <div class="external-count">외부: @day.ExternalParkings.Count</div>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Date Detail Modal -->
@if (selectedDate.HasValue)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@selectedDate.Value.ToString("yyyy년 MM월 dd일") 주차 현황</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-4">
                            <div class="card">
                                <div class="card-header">
                                    <h6 class="mb-0">주차권 사용</h6>
                                </div>
                                <div class="card-body">
                                    @if (selectedDateParkingUsages.Any())
                                    {
                                        @foreach (var usage in selectedDateParkingUsages)
                                        {
                                            <div class="parking-item">
                                                <strong>@usage.User?.Name</strong>
                                                <small class="text-muted d-block">@usage.UsedAt.ToString("HH:mm")</small>
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        <p class="text-muted">사용 기록이 없습니다.</p>
                                    }
                                    <button class="btn btn-primary btn-sm mt-2" @onclick="() => ShowAddUsageModal()">
                                        사용 기록 추가
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="card">
                                <div class="card-header">
                                    <h6 class="mb-0">주차권 반납</h6>
                                </div>
                                <div class="card-body">
                                    @if (selectedDateParkingReturns.Any())
                                    {
                                        @foreach (var returnRecord in selectedDateParkingReturns)
                                        {
                                            <div class="parking-item">
                                                <strong>@returnRecord.User?.Name</strong>
                                                <small class="text-muted d-block">@returnRecord.ReturnedAt.ToString("HH:mm")</small>
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        <p class="text-muted">반납 기록이 없습니다.</p>
                                    }
                                    <button class="btn btn-success btn-sm mt-2" @onclick="() => ShowAddReturnModal()">
                                        반납 기록 추가
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="card">
                                <div class="card-header">
                                    <h6 class="mb-0">외부 주차</h6>
                                </div>
                                <div class="card-body">
                                    @if (selectedDateExternalParkings.Any())
                                    {
                                        @foreach (var parking in selectedDateExternalParkings)
                                        {
                                            <div class="parking-item">
                                                <strong>@parking.User?.Name</strong>
                                                <small class="text-muted d-block">@parking.Location</small>
                                                @if (parking.Cost.HasValue)
                                                {
                                                    <small class="text-muted">@parking.Cost.Value.ToString("C")</small>
                                                }
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        <p class="text-muted">외부 주차 기록이 없습니다.</p>
                                    }
                                    <button class="btn btn-warning btn-sm mt-2" @onclick="() => ShowAddExternalModal()">
                                        외부 주차 추가
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Add Usage Modal -->
@if (showAddUsageModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">주차권 사용 기록 추가</h5>
                    <button type="button" class="btn-close" @onclick="CloseAddUsageModal"></button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="usageUser">사용자</label>
                        <select id="usageUser" class="form-control" @bind="selectedUsageUserId">
                            <option value="">사용자를 선택하세요</option>
                            @foreach (var user in users)
                            {
                                <option value="@user.Id">@user.Name</option>
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="usageTime">사용 시간</label>
                        <input type="time" id="usageTime" class="form-control" @onchange="@((e) => usageTime = e.Value?.ToString() ?? "09:00")" value="@usageTime" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseAddUsageModal">취소</button>
                    <button type="button" class="btn btn-primary" @onclick="AddUsageRecord">추가</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Add Return Modal -->
@if (showAddReturnModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">주차권 반납 기록 추가</h5>
                    <button type="button" class="btn-close" @onclick="CloseAddReturnModal"></button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="returnUser">사용자</label>
                        <select id="returnUser" class="form-control" @bind="selectedReturnUserId">
                            <option value="">사용자를 선택하세요</option>
                            @foreach (var user in users)
                            {
                                <option value="@user.Id">@user.Name</option>
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="returnTime">반납 시간</label>
                        <input type="time" id="returnTime" class="form-control" @onchange="@((e) => returnTime = e.Value?.ToString() ?? "18:00")" value="@returnTime" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseAddReturnModal">취소</button>
                    <button type="button" class="btn btn-success" @onclick="AddReturnRecord">추가</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Add External Parking Modal -->
@if (showAddExternalModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">외부 주차 기록 추가</h5>
                    <button type="button" class="btn-close" @onclick="CloseAddExternalModal"></button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="externalUser">사용자</label>
                        <select id="externalUser" class="form-control" @bind="selectedExternalUserId">
                            <option value="">사용자를 선택하세요</option>
                            @foreach (var user in users)
                            {
                                <option value="@user.Id">@user.Name</option>
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="externalLocation">주차 위치</label>
                        <input type="text" id="externalLocation" class="form-control" @bind="externalLocation" placeholder="주차 위치를 입력하세요" />
                    </div>
                    <div class="form-group">
                        <label for="externalCost">주차 비용</label>
                        <input type="number" id="externalCost" class="form-control" @bind="externalCost" placeholder="주차 비용을 입력하세요" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseAddExternalModal">취소</button>
                    <button type="button" class="btn btn-warning" @onclick="AddExternalRecord">추가</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private DateTime currentMonth = DateTime.Today;
    private List<CalendarWeek> calendarWeeks = new();
    private DateTime? selectedDate;
    private List<ParkingUsage> selectedDateParkingUsages = new();
    private List<ParkingReturn> selectedDateParkingReturns = new();
    private List<ExternalParking> selectedDateExternalParkings = new();
    private List<User> users = new();
    
    // Modal states
    private bool showAddUsageModal = false;
    private bool showAddReturnModal = false;
    private bool showAddExternalModal = false;
    
    // Form data
    private int selectedUsageUserId;
    private int selectedReturnUserId;
    private int selectedExternalUserId;
    private string usageTime = "09:00";
    private string returnTime = "18:00";
    private string externalLocation = "";
    private decimal? externalCost;

    protected override async Task OnInitializedAsync()
    {
        await LoadCalendarData();
        users = await DataService.GetUsersAsync();
    }

    private async Task LoadCalendarData()
    {
        calendarWeeks = GenerateCalendarWeeks(currentMonth);
        await LoadParkingData();
    }

    private List<CalendarWeek> GenerateCalendarWeeks(DateTime month)
    {
        var weeks = new List<CalendarWeek>();
        var firstDayOfMonth = new DateTime(month.Year, month.Month, 1);
        var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
        
        var firstDayOfWeek = firstDayOfMonth.DayOfWeek;
        var startDate = firstDayOfMonth.AddDays(-(int)firstDayOfWeek);

        for (int week = 0; week < 6; week++)
        {
            var weekDays = new List<CalendarDay>();
            for (int day = 0; day < 7; day++)
            {
                var date = startDate.AddDays(week * 7 + day);
                weekDays.Add(new CalendarDay
                {
                    Date = date,
                    IsCurrentMonth = date.Month == month.Month,
                    ParkingUsages = new List<ParkingUsage>(),
                    ParkingReturns = new List<ParkingReturn>(),
                    ExternalParkings = new List<ExternalParking>()
                });
            }
            weeks.Add(new CalendarWeek { Days = weekDays });
        }

        return weeks;
    }

    private async Task LoadParkingData()
    {
        var startDate = new DateTime(currentMonth.Year, currentMonth.Month, 1);
        var endDate = startDate.AddMonths(1).AddDays(-1);

        var usages = await DataService.GetParkingUsagesAsync();
        var returns = await DataService.GetParkingReturnsAsync();
        var externalParkings = await DataService.GetExternalParkingsAsync();
        var users = await DataService.GetUsersAsync();

        // Populate calendar days with parking data
        foreach (var week in calendarWeeks)
        {
            foreach (var day in week.Days)
            {
                if (day.IsCurrentMonth)
                {
                    day.ParkingUsages = usages.Where(u => u.Date.Date == day.Date.Date).ToList();
                    day.ParkingReturns = returns.Where(r => r.Date.Date == day.Date.Date).ToList();
                    day.ExternalParkings = externalParkings.Where(e => e.Date.Date == day.Date.Date).ToList();

                    // Load user data for each parking record
                    foreach (var usage in day.ParkingUsages)
                    {
                        usage.User = users.FirstOrDefault(u => u.Id == usage.UserId);
                    }
                    foreach (var returnRecord in day.ParkingReturns)
                    {
                        returnRecord.User = users.FirstOrDefault(u => u.Id == returnRecord.UserId);
                    }
                    foreach (var parking in day.ExternalParkings)
                    {
                        parking.User = users.FirstOrDefault(u => u.Id == parking.UserId);
                    }
                }
            }
        }
    }

    private async Task PreviousMonth()
    {
        currentMonth = currentMonth.AddMonths(-1);
        await LoadCalendarData();
    }

    private async Task NextMonth()
    {
        currentMonth = currentMonth.AddMonths(1);
        await LoadCalendarData();
    }

    private async Task SelectDate(DateTime date)
    {
        selectedDate = date;
        selectedDateParkingUsages = await DataService.GetParkingUsagesByDateAsync(date);
        selectedDateParkingReturns = await DataService.GetParkingReturnsByDateAsync(date);
        selectedDateExternalParkings = await DataService.GetExternalParkingsByDateAsync(date);

        var users = await DataService.GetUsersAsync();
        foreach (var usage in selectedDateParkingUsages)
        {
            usage.User = users.FirstOrDefault(u => u.Id == usage.UserId);
        }
        foreach (var returnRecord in selectedDateParkingReturns)
        {
            returnRecord.User = users.FirstOrDefault(u => u.Id == returnRecord.UserId);
        }
        foreach (var parking in selectedDateExternalParkings)
        {
            parking.User = users.FirstOrDefault(u => u.Id == parking.UserId);
        }
    }

    private void CloseModal()
    {
        selectedDate = null;
    }

    private void ShowAddUsageModal()
    {
        showAddUsageModal = true;
        selectedUsageUserId = 0;
        usageTime = "09:00";
    }

    private void CloseAddUsageModal()
    {
        showAddUsageModal = false;
    }

    private async Task AddUsageRecord()
    {
        if (selectedUsageUserId == 0 || selectedDate == null)
        {
            return;
        }

        var timeParts = usageTime.Split(':');
        var hour = int.Parse(timeParts[0]);
        var minute = int.Parse(timeParts[1]);
        var usageDateTime = selectedDate.Value.Date.AddHours(hour).AddMinutes(minute);
        
        var usage = new ParkingUsage
        {
            UserId = selectedUsageUserId,
            Date = selectedDate.Value,
            UsedAt = usageDateTime
        };

        await DataService.AddParkingUsageAsync(usage);
        await LoadCalendarData();
        await SelectDate(selectedDate.Value);
        CloseAddUsageModal();
    }

    private void ShowAddReturnModal()
    {
        showAddReturnModal = true;
        selectedReturnUserId = 0;
        returnTime = "18:00";
    }

    private void CloseAddReturnModal()
    {
        showAddReturnModal = false;
    }

    private async Task AddReturnRecord()
    {
        if (selectedReturnUserId == 0 || selectedDate == null)
        {
            return;
        }

        var returnTimeParts = returnTime.Split(':');
        var returnHour = int.Parse(returnTimeParts[0]);
        var returnMinute = int.Parse(returnTimeParts[1]);
        var returnDateTime = selectedDate.Value.Date.AddHours(returnHour).AddMinutes(returnMinute);
        
        var returnRecord = new ParkingReturn
        {
            UserId = selectedReturnUserId,
            Date = selectedDate.Value,
            ReturnedAt = returnDateTime
        };

        await DataService.AddParkingReturnAsync(returnRecord);
        await LoadCalendarData();
        await SelectDate(selectedDate.Value);
        CloseAddReturnModal();
    }

    private void ShowAddExternalModal()
    {
        showAddExternalModal = true;
        selectedExternalUserId = 0;
        externalLocation = "";
        externalCost = null;
    }

    private void CloseAddExternalModal()
    {
        showAddExternalModal = false;
    }

    private async Task AddExternalRecord()
    {
        if (selectedExternalUserId == 0 || selectedDate == null || string.IsNullOrWhiteSpace(externalLocation))
        {
            return;
        }

        var externalParking = new ExternalParking
        {
            UserId = selectedExternalUserId,
            Date = selectedDate.Value,
            Location = externalLocation,
            Cost = externalCost
        };

        await DataService.AddExternalParkingAsync(externalParking);
        await LoadCalendarData();
        await SelectDate(selectedDate.Value);
        CloseAddExternalModal();
    }

    public class CalendarWeek
    {
        public List<CalendarDay> Days { get; set; } = new();
    }

    public class CalendarDay
    {
        public DateTime Date { get; set; }
        public bool IsCurrentMonth { get; set; }
        public List<ParkingUsage> ParkingUsages { get; set; } = new();
        public List<ParkingReturn> ParkingReturns { get; set; } = new();
        public List<ExternalParking> ExternalParkings { get; set; } = new();
    }
}
